##ciderpress configuration file##
# The options below are configuration options that need to be filled out (unless otherwise noted) for the script to run successfully. Each variable/configuration option will have an explanation as to what it is for, why it needs to be set, and valid configuration options.
# After ciderpress completes and you confirm everything is running correctly, you may delete, shred, burn, or consume this file however you see fit.
# But in all seriousness, after the script completes, store this file some place SAFE, or delete it.

##wp_basedir##
# sets the directory where you would like wordpress to be installed.
# Do not place any trailing slashes (/) at the end of the desired directory path. Must be an absolute path
# default setting: /var/www/html/wordpress
wp_basedir=/var/www/html/wordpress

##wp_db_user##
# sets the wordpress database user's username.
# default setting: wpdba
wp_db_user=wpdba

##wp_database_name
# sets the name of the database where wordpress will live.
# generally speaking, changing the name of the database makes it much harder for attackers to use automated sql injection attacks, due to presumptions security tools use to automate such attacks.
# yeah, its security by obscurity, but security is a journey, not a destination, and you wanna fill that road with caltrops and snares.
# default setting: wpblogdb
wp_database_name=wpblogdb

##wp_mysql_password##
# sets the password for the wordpress mysql account. Put your password inside the single quotes
# Because shell scripts are squirrely, make this password alphanumerics only. something like 20+ characters should be good.
# If you wanna change the password in this file later:
# mysqladmin -uwpdba -p[password here] password
# default setting: 'AH4wPwU7YrTVuTP9UwsnmC35a'
# this should go without saying, but for god sake, change the default password.
# and PLEASE consider saving your password to a password manager or notebook or something.
wp_mysql_password=AH4wPwU7YrTVuTP9UwsnmC35a

##wp_hostname##
# sets the server_name parameter in the nginx site config
# important for letsencrypt acme.sh to work and grab your SSL cert.
# default setting: `hostname` (output from the hostname command)
wp_hostname=`hostname`

##use_letsencrypt##
# If set to 1, we grab the acme.sh shell script, run it in nginx mode, and assuming successful completion, take the key and cert files and drop them into /etc/nginx/ssl with restricted file permissions.
# If its set to anything else, generate a key and self-signed cert. Sure crypto nerds and privacy enthusiasts will scream that self-signed certs are the devil, but who cares.
# default setting: 1
use_letsencrypt=1

##max_upload##
# sets the maximum upload size in three different locations:
# client_max_body_size in the wordpress site config, as well as upload_max_filesize, and post_max_size in /etc/php/?.?/fpm/php.ini
# nginx supports appending "g" to the end of the client_max_body_size number to denote gigabytes (e.g. client_max_body_size 1g;)
# however I can't find anything that seems to imply that the php.ini file supports using 'g' to denote gigabytes.
# I recommend expressing this number as a variable with an 'M' for megabytes (e.g. 10M for 10 megabytes, 100M for 100 megabytes, 1024M for 1 gigabyte, etc.)
# default setting: 10M
max_upload=10M

##admin_net##
# sets the IP address or netblock that is allowed to access the wp-admin directory
# this is done to limit login attempts and severely limits brute-force attempts
# default setting: 127.0.0.1
# "How am I supposed to access the console then?"
# dynamic SSH tunnel (e.g. ssh -D 8080 username@wordpresserver then configure your browser to use the SOCKS5 proxy at 127.0.0.1:8080)
# format: single ip address (e.g. 1.1.1.1) or you can specify a subnet (e.g. 192.168.1.0/24)
admin_net=127.0.0.1

##update_automation##
# if set to 1, installs the updater shell script to /root/adm_scripts, and configures a cron job in /etc/crontab to run at 5am once weekly on Mondays.
# this script reboots the system after updating. So if a reboot at 5am once weekly is not agreeable, either you can modify /etc/crontab yourself, or set update_automation to 0.
# hint: crontab.guru will help you set up crontab entries.
# default setting: 1
update_automation=1

##backup_automation##
# if set to 1, installs backup script to /root/adm_scripts, and configures a cron job in /etc/crontab to run at 5:30am once weekly on Mondays. 
# This script will run mysqldump against the wordpress database name you specified, copy the wordpress install directory you specify,
# compress them together in a tarball, store it in /opt/bkups (owned by root, with visibility only available to the root user/group (770 /opt/bkups, 660 backup.tar.gz)
# If thats not a good time, either edit /etc/crontab manually, or set backup_automation to 0
# default setting: 1
backup_automation=1

##backup_trimming##
# if set to 1, installs a script to /root/adm_scripts, and configures a cron job in /etc/crontab to run at 6am once weekly on Mondays.
# this script simply runs find against /opt/bkups and looks for any files that are over 90 days old with the -delete flag. 
# This effectively trims your old backups automatically to prevent old backups from consuming all the disk space.
# not a good time for this to run? edit /etc/crontab.
# 90 days not enough time? edit the "mtime" parameter in /root/adm_scripts/bkup_trimmer.sh
# don't want automated backup trimming at all? set back_trimming to 0
# default setting: 1
backup_trimming=1




##database_backup_automation
